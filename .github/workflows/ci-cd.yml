name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Admin Service
        run: |
          cd Admin/project
          for i in {1..3}; do npm install --no-optional && break || sleep 5; done
          docker build -t ${{ secrets.DOCKER_USERNAME }}/admin-service:latest .  # Explicitly build the Admin service image
          docker push ${{ secrets.DOCKER_USERNAME }}/admin-service:latest

      - name: Build and Push User Service
        run: |
          cd User/project
          for i in {1..3}; do npm install --no-optional && break || sleep 5; done
          docker build -t ${{ secrets.DOCKER_USERNAME }}/user-service:latest .  # Explicitly build the User service image
          docker push ${{ secrets.DOCKER_USERNAME }}/user-service:latest

      - name: Build and Push Nginx Service
        run: |
          cd nginx  # Navigate to the nginx folder
          docker build -t ${{ secrets.DOCKER_USERNAME }}/nginx-service:latest .  # Explicitly build the Nginx image
          docker push ${{ secrets.DOCKER_USERNAME }}/nginx-service:latest  # Push the Nginx image to Docker Hub

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa  # Add the private key from GitHub secrets
          chmod 600 ~/.ssh/id_rsa
          # Ensure known_hosts file exists
          if [ ! -f ~/.ssh/known_hosts ]; then touch ~/.ssh/known_hosts; fi
          # Ensure the EC2 public IP is properly scanned and added to known_hosts
          ssh-keyscan -H 3.87.137.75 >> ~/.ssh/known_hosts  # Use the updated EC2 public IP here

      - name: Test SSH Connection
        run: |
          ssh -v -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ec2-user@3.87.137.75 echo "SSH Connection Successful"

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@3.87.137.75 << 'EOF'
          set -e
          cd ~/environment/microservices  # Ensure correct lowercase folder name here
          docker-compose -f Admin/project/admin-docker-compose.yaml -p admin down || true
          docker-compose -f User/project/user-docker-compose.yaml -p user down || true
          docker network rm app-network || true
          docker network create app-network || true
          cd Admin/project
          docker-compose -f admin-docker-compose.yaml -p admin up --build --force-recreate -d
          cd ../../User/project
          docker-compose -f user-docker-compose.yaml -p user up --build --force-recreate -d
          cd ../../nginx
          docker-compose -f docker-compose.yml -p nginx up --build --force-recreate -d
          docker network inspect app-network
          docker ps
          EOF

      - name: Verify Deployment
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@3.87.137.75 << 'EOF'
          docker ps
          docker network inspect app-network
          EOF
